// App Mixins
// --------------------------------------------------
// Funcoes sass para estilizacao do app

/**
* Aplica a propriedade desejada para todos os prefixos dos browsers
*
* @param {string} $property - Propriedade que deseja aplicar os prefixos
* @param {string} $value - Valor da propriedade a ser aplicado o prefixo
*/
@mixin vendor-prefixes($property, $value) {
  #{$property}: $value;
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
}

/**
* Define as bordas arredondadas de um elemento
*
* @param {string} $radius - Texto com os valores da borda. Pode ser
* o valor geral ou valores especificos para cada borda.
*/
@mixin border-radius($radius) {
  @include vendor-prefixes(border-radius, $radius);
}

/**
* Define os filtros
*
* @param {string} $radius - Texto com os valores do filtro.
*/

@mixin filter($value) {
  @include vendor-prefixes(filter, $value);
}

/**
* Aplicacao de background linear
*
* @param {List} $params - Params
*/

@mixin transform($params) {
  @include vendor-prefixes('transform', $params);
}

/**
* Aplica opacidade no elemento
* @param {string} $opacity - Valor da opacidade (Ex: 0.5)
*/
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/**
* Facilita a criação de animações, com menos linhas de código
* @param {string} $str - Argumentos que serão passados para o efeito de animação
*/
@mixin animation($params) {
  @include vendor-prefixes('animation', $params);
}

/**
* Facilita a criação de animações, com menos linhas de código
* @param {List} $properties - Propriedades referentes a transicao
*/

@mixin transition($properties...) {
  @if length($properties) >= 1 {
    @include vendor-prefixes('transition', $properties);
  }

  @else {
    @include vendor-prefixes('transition',  "all 0.2s ease-in-out 0s");
  }
}

/**
* Manipula o placeholder de acordo com os prefixos necessarios
*/

@mixin placeholder() {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

/**
* Adiciona o ellipsis se o texto ultrapassar o max-width
* @param {integer, percent} $max-width - largura em que se deve ser quebrado o texto
*/

@mixin ellipsis($max-width: 100%){
  display: inline-block;
  max-width: $max-width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/**
* Substitui uma string
* @param {string, search, replace}
*/

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/**
* Adiciona o font-face de forma amigável
* @param {name, path, weight, style}
*/

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin tablet {
  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}
